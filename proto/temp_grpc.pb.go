// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TempServiceClient is the client API for TempService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TempServiceClient interface {
	Proc(ctx context.Context, in *ProcRequest, opts ...grpc.CallOption) (*ProcResponse, error)
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
}

type tempServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTempServiceClient(cc grpc.ClientConnInterface) TempServiceClient {
	return &tempServiceClient{cc}
}

func (c *tempServiceClient) Proc(ctx context.Context, in *ProcRequest, opts ...grpc.CallOption) (*ProcResponse, error) {
	out := new(ProcResponse)
	err := c.cc.Invoke(ctx, "/temp.TempService/Proc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tempServiceClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, "/temp.TempService/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TempServiceServer is the server API for TempService service.
// All implementations should embed UnimplementedTempServiceServer
// for forward compatibility
type TempServiceServer interface {
	Proc(context.Context, *ProcRequest) (*ProcResponse, error)
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
}

// UnimplementedTempServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTempServiceServer struct {
}

func (UnimplementedTempServiceServer) Proc(context.Context, *ProcRequest) (*ProcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proc not implemented")
}
func (UnimplementedTempServiceServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}

// UnsafeTempServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TempServiceServer will
// result in compilation errors.
type UnsafeTempServiceServer interface {
	mustEmbedUnimplementedTempServiceServer()
}

func RegisterTempServiceServer(s grpc.ServiceRegistrar, srv TempServiceServer) {
	s.RegisterService(&TempService_ServiceDesc, srv)
}

func _TempService_Proc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TempServiceServer).Proc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temp.TempService/Proc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TempServiceServer).Proc(ctx, req.(*ProcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TempService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TempServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temp.TempService/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TempServiceServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TempService_ServiceDesc is the grpc.ServiceDesc for TempService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TempService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "temp.TempService",
	HandlerType: (*TempServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Proc",
			Handler:    _TempService_Proc_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _TempService_SetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "temp.proto",
}
